#!/usr/bin/env python3
"""
Test pour v√©rifier que la d√©tection de lot priorise bien le nom de fichier
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent))

from scripts.import_complete import ExcelParser, GeminiProcessor

def test_filename_priority():
    """Test la priorit√© de d√©tection des lots"""
    print("üß™ Test de priorit√© de d√©tection des lots")
    print("=" * 50)
    
    # Tester avec plusieurs fichiers de test
    test_files = [
        "02_2024_024_BPU_lot_7.xlsx",
        "25S012 - DPGF -Lot4.xlsx", 
        "802 DPGF Lot 2 - Curage.xlsx",
        "803 DPGF Lot 3 - Gros-oeuvre - D√©molition.xlsx",
        "804 DPGF Lot 4 - Charpente & Ossature bois - Ind B.xlsx",
        "DPGF-Lot 06 M√©tallerie-Serrurerie - Nov 2024.xlsx",
        "LOT 06 - DPGF - METALLERIE_.xlsx"
    ]
    
    # Initialiser Gemini si disponible
    gemini_processor = None
    try:
        import google.generativeai as genai
        # On peut tester sans cl√© API pour voir le fallback
        gemini_processor = GeminiProcessor(api_key="test", chunk_size=50)
        print("‚úÖ Gemini processor initialis√© (mode test)")
    except:
        print("‚ö†Ô∏è Gemini non disponible")
    
    results = []
    
    for filename in test_files:
        file_path = f"test_data/{filename}"
        print(f"\nüìÇ Test du fichier: {filename}")
        print("-" * 40)
        
        try:
            # Cr√©er l'analyseur
            parser = ExcelParser(file_path, gemini_processor=None)  # Sans Gemini d'abord
            
            # Test 1: Detection depuis le nom de fichier uniquement
            filename_lot = parser.extract_lot_from_filename()
            if filename_lot:
                print(f"  üìÑ Nom de fichier ‚Üí Lot {filename_lot[0]}: {filename_lot[1]}")
            else:
                print(f"  üìÑ Nom de fichier ‚Üí Aucun lot d√©tect√©")
            
            # Test 2: Detection compl√®te (avec toutes les priorit√©s)
            lots = parser.find_lot_headers()
            if lots:
                print(f"  üîç D√©tection compl√®te ‚Üí Lot {lots[0][0]}: {lots[0][1]}")
            else:
                print(f"  üîç D√©tection compl√®te ‚Üí Aucun lot d√©tect√©")
            
            results.append({
                'filename': filename,
                'filename_detection': filename_lot,
                'full_detection': lots[0] if lots else None
            })
            
        except Exception as e:
            print(f"  ‚ùå Erreur: {e}")
            results.append({
                'filename': filename,
                'filename_detection': None,
                'full_detection': None,
                'error': str(e)
            })
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES R√âSULTATS")
    print("=" * 60)
    
    filename_success = 0
    total_success = 0
    
    for result in results:
        print(f"\nüìÇ {result['filename']}")
        if result.get('error'):
            print(f"   ‚ùå Erreur: {result['error']}")
        else:
            if result['filename_detection']:
                print(f"   ‚úÖ Nom fichier: Lot {result['filename_detection'][0]} - {result['filename_detection'][1]}")
                filename_success += 1
            else:
                print(f"   ‚ö†Ô∏è Nom fichier: Non d√©tect√©")
            
            if result['full_detection']:
                print(f"   ‚úÖ Total: Lot {result['full_detection'][0]} - {result['full_detection'][1]}")
                total_success += 1
            else:
                print(f"   ‚ùå Total: Non d√©tect√©")
    
    print(f"\nüìà STATISTIQUES:")
    print(f"   D√©tection par nom de fichier: {filename_success}/{len(test_files)} ({filename_success/len(test_files)*100:.1f}%)")
    print(f"   D√©tection totale: {total_success}/{len(test_files)} ({total_success/len(test_files)*100:.1f}%)")
    
    # V√©rifier la priorit√©
    priority_correct = all(
        result.get('filename_detection') == result.get('full_detection') 
        for result in results 
        if result.get('filename_detection') and not result.get('error')
    )
    
    if priority_correct:
        print("‚úÖ La priorit√© du nom de fichier est respect√©e!")
    else:
        print("‚ö†Ô∏è Attention: La priorit√© du nom de fichier pourrait ne pas √™tre respect√©e")

if __name__ == "__main__":
    test_filename_priority()
