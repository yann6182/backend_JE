#!/usr/bin/env python3
"""
Script pour t√©l√©charger et tester directement un fichier DPGF du SharePoint
"""

import sys
import os
import tempfile
from pathlib import Path

# Ajouter le r√©pertoire scripts au path
scripts_dir = Path(__file__).parent / "scripts"
sys.path.insert(0, str(scripts_dir))

try:
    from identify_relevant_files_sharepoint import SharePointClient
    from import_complete import DPGFImporter
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

def test_specific_dpgf_file():
    """T√©l√©charge et teste un fichier DPGF sp√©cifique"""
    
    # Configuration SharePoint
    sharepoint_client = SharePointClient()
    
    # Nom du fichier √† tester (celui des images montr√©es)
    target_filename = "3296-DCE-DPGF-Lot 08 MOBILIERS.xlsx"
    
    print(f"üîç Recherche du fichier: {target_filename}")
    
    # Chercher le fichier dans le SharePoint
    try:
        # Lister les fichiers du dossier o√π nous savons qu'il y a des DPGF
        folder_path = "/0. A ENREGISTER SUR OPTIM"
        all_files = sharepoint_client.list_files_in_folder(folder_path, recursive=True)
        
        target_file = None
        for file_info in all_files:
            if target_filename in file_info['name']:
                target_file = file_info
                break
        
        if not target_file:
            print(f"‚ùå Fichier {target_filename} non trouv√©")
            # Afficher les premiers fichiers pour debug
            print("\nüìã Fichiers trouv√©s (premiers 10):")
            for i, file_info in enumerate(all_files[:10]):
                if file_info['name'].endswith(('.xlsx', '.xls')):
                    print(f"  {i}: {file_info['name']}")
            return
        
        print(f"‚úÖ Fichier trouv√©: {target_file['name']}")
        
        # T√©l√©charger le fichier
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp_file:
            temp_path = tmp_file.name
        
        if sharepoint_client.download_file(target_file['id'], temp_path):
            print(f"üì• Fichier t√©l√©charg√©: {temp_path}")
            
            # D'abord analyser la structure du fichier
            import pandas as pd
            try:
                # V√©rifier la taille du fichier
                file_size = os.path.getsize(temp_path)
                print(f"   Taille fichier: {file_size} bytes")
                
                if file_size == 0:
                    print("‚ùå Fichier vide apr√®s t√©l√©chargement!")
                    return
                
                # Essayer de lire toutes les feuilles
                try:
                    xl_file = pd.ExcelFile(temp_path)
                    print(f"   Feuilles disponibles: {xl_file.sheet_names}")
                    
                    # Essayer de lire toutes les feuilles pour trouver des donn√©es
                    for sheet_name in xl_file.sheet_names:
                        try:
                            df_sheet = pd.read_excel(temp_path, sheet_name=sheet_name, header=None)
                            print(f"   Feuille '{sheet_name}': {df_sheet.shape[0]} lignes x {df_sheet.shape[1]} colonnes")
                            
                            if df_sheet.shape[0] > 0 and df_sheet.shape[1] > 0:
                                print(f"\nüìã Aper√ßu de la feuille '{sheet_name}' (premi√®res 10 lignes):")
                                for i in range(min(10, df_sheet.shape[0])):
                                    row_values = [str(val) if pd.notna(val) else "" for val in df_sheet.iloc[i].values]
                                    truncated_values = [val[:30] + "..." if len(val) > 30 else val for val in row_values]
                                    print(f"     Ligne {i}: {truncated_values}")
                                
                                # Si on trouve une feuille avec des donn√©es, on l'utilise pour le test
                                if 'mobilier' in sheet_name.lower() or 'dpgf' in sheet_name.lower():
                                    print(f"\nüéØ Feuille de donn√©es identifi√©e: {sheet_name}")
                                    df = df_sheet
                                    break
                            else:
                                print(f"     ‚ö†Ô∏è Feuille '{sheet_name}' vide")
                        except Exception as e:
                            print(f"     ‚ùå Erreur lecture feuille '{sheet_name}': {e}")
                    
                except Exception as sheet_error:
                    print(f"   ‚ùå Erreur lecture feuilles: {sheet_error}")
                    # Essayer lecture standard
                    df = pd.read_excel(temp_path, header=None)
                    print(f"   Lecture standard: {df.shape[0]} lignes x {df.shape[1]} colonnes")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lecture Excel: {e}")
                # V√©rifier si c'est vraiment un fichier Excel
                with open(temp_path, 'rb') as f:
                    header = f.read(8)
                    print(f"   En-t√™te fichier (hex): {header.hex()}")
                return
            
            # Tester l'import avec debug
            importer = DPGFImporter(
                base_url="http://127.0.0.1:8000",
                debug=True,
                dry_run=True  # Mode simulation pour √©viter les erreurs API
            )
            
            print(f"\nüß™ Test d'import avec debug:")
            try:
                result = importer.import_file(
                    file_path=temp_path,
                    original_filename=target_file['name']
                )
                print(f"‚úÖ Test termin√©, r√©sultat: {result}")
            except Exception as e:
                print(f"‚ùå Erreur lors du test: {e}")
                import traceback
                traceback.print_exc()
            
            # Nettoyer
            try:
                os.unlink(temp_path)
            except:
                pass
        else:
            print(f"‚ùå √âchec du t√©l√©chargement")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_specific_dpgf_file()
