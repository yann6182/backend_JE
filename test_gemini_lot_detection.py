"""
Test de la d√©tection am√©lior√©e des lots avec Gemini.
Ce script teste la nouvelle fonctionnalit√© de d√©tection des lots utilisant Gemini.
"""

import os
import sys
from pathlib import Path
import argparse

# Ajouter le r√©pertoire scripts au path
sys.path.append(str(Path(__file__).parent / "scripts"))

try:
    from import_complete import ExcelParser, GeminiProcessor, ColumnMapping, ErrorReporter
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("üí° Assurez-vous que import_complete.py est dans scripts/")
    sys.exit(1)


def test_lot_detection_with_gemini(file_path: str, gemini_key: str = None):
    """
    Test la d√©tection des lots avec et sans Gemini
    
    Args:
        file_path: Chemin vers le fichier Excel √† tester
        gemini_key: Cl√© API Gemini (optionnelle)
    """
    print(f"üß™ Test de d√©tection des lots pour: {Path(file_path).name}")
    print("=" * 60)
    
    # Test 1: D√©tection classique (sans Gemini)
    print("\\n1Ô∏è‚É£ D√âTECTION CLASSIQUE (sans Gemini)")
    print("-" * 40)
    
    try:
        parser_classic = ExcelParser(file_path, ColumnMapping(), ErrorReporter(), dry_run=True)
        lots_classic = parser_classic.find_lot_headers()
        
        if lots_classic:
            print(f"‚úÖ Lots d√©tect√©s (m√©thode classique): {len(lots_classic)}")
            for numero, nom in lots_classic:
                print(f"   ‚Ä¢ Lot {numero}: {nom}")
        else:
            print("‚ùå Aucun lot d√©tect√© avec la m√©thode classique")
            
    except Exception as e:
        print(f"‚ùå Erreur m√©thode classique: {e}")
        lots_classic = []
    
    # Test 2: D√©tection avec Gemini (si cl√© fournie)
    lots_gemini = []
    if gemini_key:
        print("\\n2Ô∏è‚É£ D√âTECTION AVEC GEMINI")
        print("-" * 40)
        
        try:
            gemini_processor = GeminiProcessor(api_key=gemini_key, chunk_size=20)
            parser_gemini = ExcelParser(file_path, ColumnMapping(), ErrorReporter(), 
                                      dry_run=True, gemini_processor=gemini_processor)
            lots_gemini = parser_gemini.find_lot_headers()
            
            if lots_gemini:
                print(f"‚úÖ Lots d√©tect√©s (avec Gemini): {len(lots_gemini)}")
                for numero, nom in lots_gemini:
                    print(f"   ‚Ä¢ Lot {numero}: {nom}")
            else:
                print("‚ùå Aucun lot d√©tect√© avec Gemini")
                
        except Exception as e:
            print(f"‚ùå Erreur Gemini: {e}")
            lots_gemini = []
    else:
        print("\\n2Ô∏è‚É£ D√âTECTION AVEC GEMINI")
        print("-" * 40)
        print("‚ö†Ô∏è Cl√© Gemini non fournie, test ignor√©")
    
    # Comparaison des r√©sultats
    print("\\n3Ô∏è‚É£ COMPARAISON DES R√âSULTATS")
    print("-" * 40)
    
    if lots_classic and lots_gemini:
        if lots_classic == lots_gemini:
            print("‚úÖ Les deux m√©thodes donnent les m√™mes r√©sultats")
        else:
            print("‚ö†Ô∏è R√©sultats diff√©rents entre les deux m√©thodes:")
            print(f"   Classique: {lots_classic}")
            print(f"   Gemini: {lots_gemini}")
    elif lots_gemini and not lots_classic:
        print("üöÄ Gemini a r√©ussi l√† o√π la m√©thode classique a √©chou√© !")
        print("   Ceci d√©montre l'am√©lioration apport√©e par l'IA")
    elif lots_classic and not lots_gemini:
        print("üîÑ La m√©thode classique a r√©ussi mais pas Gemini")
        print("   Ceci peut indiquer un probl√®me avec le prompt Gemini")
    elif not lots_classic and not lots_gemini:
        print("‚ùå Aucune m√©thode n'a r√©ussi √† d√©tecter un lot")
        print("   Le fichier ne contient peut-√™tre pas d'information de lot claire")
    
    # Analyse du contenu pour debug
    print("\\n4Ô∏è‚É£ ANALYSE DU CONTENU (DEBUG)")
    print("-" * 40)
    
    try:
        import pandas as pd
        df = pd.read_excel(file_path, nrows=10)
        
        print("Aper√ßu du contenu (10 premi√®res lignes):")
        for i in range(min(10, len(df))):
            row_data = []
            for j in range(min(5, len(df.columns))):
                cell_value = df.iloc[i, j]
                if pd.notna(cell_value):
                    row_data.append(str(cell_value)[:30])  # Limiter √† 30 caract√®res
                else:
                    row_data.append("")
            print(f"   Ligne {i}: {' | '.join(row_data)}")
    except Exception as e:
        print(f"‚ùå Erreur lecture fichier: {e}")
    
    return lots_classic, lots_gemini


def test_multiple_files(test_dir: str = "test_data", gemini_key: str = None):
    """
    Test la d√©tection des lots sur plusieurs fichiers
    
    Args:
        test_dir: R√©pertoire contenant les fichiers de test
        gemini_key: Cl√© API Gemini (optionnelle)
    """
    print("üß™ TEST DE D√âTECTION DES LOTS SUR PLUSIEURS FICHIERS")
    print("=" * 70)
    
    test_path = Path(test_dir)
    if not test_path.exists():
        print(f"‚ùå R√©pertoire de test non trouv√©: {test_dir}")
        return
    
    excel_files = list(test_path.glob("*.xlsx")) + list(test_path.glob("*.xls"))
    
    if not excel_files:
        print(f"‚ùå Aucun fichier Excel trouv√© dans {test_dir}")
        return
    
    print(f"üìÅ {len(excel_files)} fichiers Excel trouv√©s")
    
    results = {
        'total_files': len(excel_files),
        'classic_success': 0,
        'gemini_success': 0,
        'both_success': 0,
        'neither_success': 0,
        'gemini_improvement': 0
    }
    
    for i, file_path in enumerate(excel_files, 1):
        print(f"\\nüìÑ [{i}/{len(excel_files)}] {file_path.name}")
        print("-" * 50)
        
        try:
            lots_classic, lots_gemini = test_lot_detection_with_gemini(str(file_path), gemini_key)
            
            # Statistiques
            classic_found = len(lots_classic) > 0
            gemini_found = len(lots_gemini) > 0
            
            if classic_found:
                results['classic_success'] += 1
            if gemini_found:
                results['gemini_success'] += 1
            if classic_found and gemini_found:
                results['both_success'] += 1
            if not classic_found and not gemini_found:
                results['neither_success'] += 1
            if gemini_found and not classic_found:
                results['gemini_improvement'] += 1
            
            # R√©sum√© pour ce fichier
            if classic_found and gemini_found:
                print("   üéØ R√©sultat: Les deux m√©thodes ont r√©ussi")
            elif gemini_found and not classic_found:
                print("   üöÄ R√©sultat: Seul Gemini a r√©ussi (am√©lioration !)")
            elif classic_found and not gemini_found:
                print("   üîÑ R√©sultat: Seule la m√©thode classique a r√©ussi")
            else:
                print("   ‚ùå R√©sultat: Aucune m√©thode n'a r√©ussi")
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors du test: {e}")
    
    # Rapport final
    print("\\n" + "=" * 70)
    print("üìä RAPPORT FINAL")
    print("=" * 70)
    print(f"üìÅ Fichiers test√©s: {results['total_files']}")
    print(f"‚úÖ Succ√®s m√©thode classique: {results['classic_success']}/{results['total_files']} ({results['classic_success']/results['total_files']*100:.1f}%)")
    
    if gemini_key:
        print(f"üß† Succ√®s avec Gemini: {results['gemini_success']}/{results['total_files']} ({results['gemini_success']/results['total_files']*100:.1f}%)")
        print(f"üéØ Succ√®s des deux m√©thodes: {results['both_success']}/{results['total_files']} ({results['both_success']/results['total_files']*100:.1f}%)")
        print(f"üöÄ Am√©liorations Gemini: {results['gemini_improvement']}/{results['total_files']} ({results['gemini_improvement']/results['total_files']*100:.1f}%)")
        print(f"‚ùå √âchec total: {results['neither_success']}/{results['total_files']} ({results['neither_success']/results['total_files']*100:.1f}%)")
        
        if results['gemini_improvement'] > 0:
            print(f"\\nüéâ Gemini am√©liore la d√©tection dans {results['gemini_improvement']} cas !")
        
        # Recommandations
        print("\\nüí° RECOMMANDATIONS:")
        if results['gemini_success'] > results['classic_success']:
            print("   ‚Ä¢ Gemini am√©liore significativement la d√©tection des lots")
            print("   ‚Ä¢ Recommandation: Utiliser Gemini par d√©faut pour la d√©tection des lots")
        elif results['gemini_success'] == results['classic_success']:
            print("   ‚Ä¢ Les deux m√©thodes ont des performances similaires")
            print("   ‚Ä¢ Recommandation: Garder Gemini comme m√©thode de fallback")
        else:
            print("   ‚Ä¢ La m√©thode classique reste plus fiable")
            print("   ‚Ä¢ Recommandation: Am√©liorer le prompt Gemini")
    else:
        print("‚ö†Ô∏è Tests Gemini non effectu√©s (cl√© API non fournie)")


def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description="Test de d√©tection des lots avec Gemini")
    parser.add_argument("--file", help="Fichier Excel sp√©cifique √† tester")
    parser.add_argument("--test-dir", default="test_data", help="R√©pertoire contenant les fichiers de test")
    parser.add_argument("--gemini-key", help="Cl√© API Google Gemini")
    parser.add_argument("--all", action="store_true", help="Tester tous les fichiers du r√©pertoire")
    
    args = parser.parse_args()
    
    if not args.gemini_key:
        print("‚ö†Ô∏è Cl√© Gemini non fournie - seule la m√©thode classique sera test√©e")
        print("üí° Utilisez --gemini-key pour tester avec l'IA")
    
    if args.file:
        # Test d'un fichier sp√©cifique
        if not Path(args.file).exists():
            print(f"‚ùå Fichier non trouv√©: {args.file}")
            return 1
        
        test_lot_detection_with_gemini(args.file, args.gemini_key)
        
    elif args.all:
        # Test de tous les fichiers du r√©pertoire
        test_multiple_files(args.test_dir, args.gemini_key)
        
    else:
        print("‚ùå Sp√©cifiez --file ou --all")
        print("\\nExemples d'utilisation:")
        print("  python test_gemini_lot_detection.py --file test_data/mon_fichier.xlsx --gemini-key YOUR_KEY")
        print("  python test_gemini_lot_detection.py --all --gemini-key YOUR_KEY")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
