"""
Test de l'orchestrateur optimis√© avec la d√©tection de lots am√©lior√©e par Gemini.
Ce script teste quelques fichiers avec la nouvelle fonctionnalit√©.
"""

import subprocess
import sys
import os
from pathlib import Path


def test_orchestrator_with_gemini_lots():
    """Test l'orchestrateur avec la d√©tection de lots am√©lior√©e"""
    
    print("üß™ TEST DE L'ORCHESTRATEUR OPTIMIS√â AVEC D√âTECTION DE LOTS GEMINI")
    print("=" * 70)
    
    # Commandes de test √† essayer
    test_cases = [
        {
            'name': 'Test basique (3 dossiers, sans Gemini)',
            'cmd': [
                'python', 'orchestrate_dpgf_workflow_optimized.py',
                '--max-folders', '3',
                '--max-files-per-folder', '5', 
                '--test-mode'
            ]
        },
        {
            'name': 'Test avec import automatique (sans Gemini)',
            'cmd': [
                'python', 'orchestrate_dpgf_workflow_optimized.py',
                '--max-folders', '2',
                '--max-files-per-folder', '3',
                '--auto-import',
                '--debug-import'
            ]
        }
    ]
    
    # Test avec Gemini si cl√© fournie
    gemini_key = os.environ.get('GEMINI_API_KEY')
    if gemini_key:
        test_cases.append({
            'name': 'Test avec Gemini pour d√©tection des lots',
            'cmd': [
                'python', 'orchestrate_dpgf_workflow_optimized.py',
                '--max-folders', '2',
                '--max-files-per-folder', '3',
                '--auto-import',
                '--debug-import',
                '--gemini-key', gemini_key
            ]
        })
    else:
        print("‚ö†Ô∏è Variable d'environnement GEMINI_API_KEY non d√©finie")
        print("üí° D√©finissez-la pour tester avec Gemini: set GEMINI_API_KEY=your_key")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\\n{i}Ô∏è‚É£ {test_case['name']}")
        print("-" * 50)
        
        try:
            print(f"Commande: {' '.join(test_case['cmd'])}")
            print("\\nEx√©cution en cours...")
            
            result = subprocess.run(
                test_case['cmd'],
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                timeout=300,  # 5 minutes max par test
                cwd=Path(__file__).parent
            )
            
            if result.returncode == 0:
                print("‚úÖ Test r√©ussi !")
                
                # Extraire les statistiques importantes de la sortie
                lines = result.stdout.split('\\n')
                for line in lines:
                    if any(keyword in line for keyword in ['‚úÖ', 'üìÅ', 'üìä', 'üéØ', 'üíæ', '‚ö†Ô∏è']):
                        print(f"   {line}")
                        
            else:
                print(f"‚ùå Test √©chou√© (code {result.returncode})")
                if result.stderr:
                    print(f"Erreur: {result.stderr[:300]}")
                    
        except subprocess.TimeoutExpired:
            print("‚è∞ Test interrompu (timeout)")
        except Exception as e:
            print(f"üí• Erreur lors de l'ex√©cution: {e}")


def test_import_direct_with_gemini():
    """Test l'import direct avec Gemini"""
    
    print("\\n" + "=" * 70)
    print("üîß TEST D'IMPORT DIRECT AVEC D√âTECTION LOTS GEMINI")
    print("=" * 70)
    
    # Choisir un fichier de test
    test_files = [
        "test_data/LOT 06 - DPGF - METALLERIE_.xlsx",
        "test_data/DPGF-Lot 06 M√©tallerie-Serrurerie - Nov 2024.xlsx"
    ]
    
    for test_file in test_files:
        if Path(test_file).exists():
            print(f"\\nüìÑ Test avec: {Path(test_file).name}")
            print("-" * 40)
            
            # Test sans Gemini
            cmd_classic = [
                'python', 'scripts/import_complete.py',
                '--file', test_file,
                '--dry-run',
                '--debug'
            ]
            
            print("1. Import sans Gemini (dry-run):")
            try:
                result = subprocess.run(
                    cmd_classic,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    errors='replace',
                    timeout=60,
                    cwd=Path(__file__).parent
                )
                
                if result.returncode == 0:
                    # Chercher les lignes sur la d√©tection du lot
                    lines = result.stdout.split('\\n')
                    for line in lines:
                        if 'lot' in line.lower() and ('d√©tect√©' in line.lower() or 'trouv√©' in line.lower()):
                            print(f"   {line}")
                else:
                    print(f"   ‚ùå √âchec (code {result.returncode})")
                    
            except Exception as e:
                print(f"   üí• Erreur: {e}")
            
            # Test avec Gemini si cl√© disponible
            gemini_key = os.environ.get('GEMINI_API_KEY')
            if gemini_key:
                cmd_gemini = [
                    'python', 'scripts/import_complete.py',
                    '--file', test_file,
                    '--dry-run',
                    '--debug',
                    '--gemini-key', gemini_key
                ]
                
                print("\\n2. Import avec Gemini (dry-run):")
                try:
                    result = subprocess.run(
                        cmd_gemini,
                        capture_output=True,
                        text=True,
                        encoding='utf-8',
                        errors='replace',
                        timeout=120,  # Plus de temps pour Gemini
                        cwd=Path(__file__).parent
                    )
                    
                    if result.returncode == 0:
                        # Chercher les lignes sur Gemini et la d√©tection du lot
                        lines = result.stdout.split('\\n')
                        for line in lines:
                            if any(keyword in line for keyword in ['üß†', 'Gemini', 'lot', 'Lot']):
                                print(f"   {line}")
                    else:
                        print(f"   ‚ùå √âchec (code {result.returncode})")
                        if result.stderr:
                            print(f"   Erreur: {result.stderr[:200]}")
                            
                except Exception as e:
                    print(f"   üí• Erreur: {e}")
            else:
                print("\\n2. Test Gemini ignor√© (cl√© API non d√©finie)")
            
            break  # Tester seulement le premier fichier trouv√©
    else:
        print("‚ùå Aucun fichier de test trouv√©")


def main():
    """Fonction principale"""
    print("üöÄ TESTS DE LA D√âTECTION DE LOTS AM√âLIOR√âE AVEC GEMINI")
    print("=" * 70)
    
    # V√©rifier la configuration
    if not Path("orchestrate_dpgf_workflow_optimized.py").exists():
        print("‚ùå orchestrate_dpgf_workflow_optimized.py non trouv√©")
        return 1
    
    if not Path("scripts/import_complete.py").exists():
        print("‚ùå scripts/import_complete.py non trouv√©")
        return 1
    
    # Lancer les tests
    test_orchestrator_with_gemini_lots()
    test_import_direct_with_gemini()
    
    print("\\n" + "=" * 70)
    print("üìã R√âSUM√â DES AM√âLIORATIONS")
    print("=" * 70)
    print("‚úÖ D√©tection des lots d√©l√©gu√©e √† Gemini quand disponible")
    print("‚úÖ Fallback sur la m√©thode classique si Gemini √©choue")
    print("‚úÖ Am√©lioration de la robustesse de d√©tection des lots")
    print("‚úÖ Tests de validation cr√©√©s")
    print("\\nüí° Pour utiliser Gemini:")
    print("   set GEMINI_API_KEY=your_api_key")
    print("   python orchestrate_dpgf_workflow_optimized.py --auto-import --gemini-key %GEMINI_API_KEY%")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
